Web Application 1: Your Wish is My Command Injection

Screenshots: https://imgur.com/a/SHywfqR

Mitigation strategies would include server-side validation to only allow the desired
input (no &&/||/etc values allowed) as inputs and parameterized database queries that restrict input from the user.

-------------------------------------------------------------------------------------------------------------------------

Web Application 2: A Brute Force to Be Reckoned With

Screenshots: https://imgur.com/a/6vegUmy

Mitigation strategies would include requiring complex usernames and passwords, using multi-factored authentication,
and enabling a lockout after a certain amount of failed login attempts.

-------------------------------------------------------------------------------------------------------------------------

Web Application 3: Where's the BeEF?

Screenshots: https://imgur.com/a/7uT5bfe

Mitigation strategies would include:
1. Filter input on arrival. At the point where user input is received, filter as strictly as possible
   based on what is expected or valid input.

2. Encode data on output. At the point where user-controllable data is output in HTTP responses,
   encode the output to prevent it from being interpreted as active content. Depending on the output context,
   this might require applying combinations of HTML, URL, JavaScript, and CSS encoding.
   
3. Use appropriate response headers. To prevent XSS in HTTP responses that aren't intended to contain any HTML
   or JavaScript, you can use the Content-Type and X-Content-Type-Options headers to ensure that browsers interpret
   the responses in the way you intend.
   
4. Content Security Policy. As a last line of defense, you can use Content Security Policy (CSP) to reduce the severity
   of any XSS vulnerabilities that still occur.
   
source: https://portswigger.net/web-security/cross-site-scripting

